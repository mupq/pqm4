#ifndef NTT_H
#define NTT_H

#include <stdint.h>

#include "NTT_params.h"

extern void __asm_Good_3x2(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q, uint16_t *src);
extern void __asm_Good_3x2_small(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q, uint16_t *src);
extern void __asm_3x2block_ntt(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q);
extern void __asm_ntt(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q);
extern void __asm_base_mul(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q, int32_t *src1, int32_t *src2);
extern void __asm_intt(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q);
extern void __asm_3x2block_intt(int32_t *des, const int32_t *table, int32_t Qprime, int32_t Q);
extern void __asm_i_Good(int32_t *des, int32_t *src);
extern void __asm_final_map(uint16_t *des, const int32_t last_const, int32_t Qprime, int32_t Q, int32_t *src);

static const int32_t streamlined_CT_table_Q1[NTT_N - 1] = {
501252, 501252, 813816, 501252, 501252, 813816, 501252, 813816, -528216, 375962, 501252, 813816, -528216, 375962, 1019169, -92513, 1377729, -1211401, 813816, -528216, 375962, 1019169, -92513, 1377729, -1211401, -1466880, -1279676, 1225515, 574218, -610895, -1524973, -407384, 194742, -528216, 1019169, -92513, -1466880, -1279676, 1225515, 574218, 1314995, 134301, -696682, -227254, -1252902, -1385566, -160209, 196491, 375962, 1377729, -1211401, -610895, -1524973, -407384, 194742, -1037090, -286265, -1145973, -1077888, 218297, 1589023, -341068, 542273
};

static const int32_t mul_Rmod_table_Q1[((NTT_N >> 1) * 9)] = {
-501252, 1481904, -980652, 19276, -1639017, 1619741, 553862, 1033921, -1587783, -813816, 1176926, -363110, 368167, 1277946, -1646113, 1531963, 1215190, 618416, 528216, 219502, -747718, -130777, 784091, -653314, -1662111, 1577955, 84156, -375962, 797185, -421223, -1467152, 1184556, 282596, 1083739, -782383, -301356, -1019169, -1573882, -772518, 425374, 1338610, 1601585, 211365, 1337287, -1548652, 92513, 1599952, 1673104, -62402, 955317, -892915, -723768, 997967, -274199, -1377729, 807143, 570586, 977947, 1150118, 1237504, 749365, 1195585, 1420619, 1211401, -1397813, 186412, 73816, -556632, 482816, 1123664, 1528906, 712999, 1466880, 220697, 1677992, -314240, 1672216, -1357976, -502421, 728387, -225966, 1279676, 626379, 1459514, -1625063, 724828, 900235, 434762, 103163, -537925, -1225515, 545675, 679840, -1001757, 1170889, -169132, 16366, 452531, -468897, -574218, -249399, 823617, 1118585, 1203183, 1043801, -652247, 1570406, -918159, 610895, -258428, -352467, -658023, -1254450, -1453096, -1528605, 911891, 616714, 1524973, 826550, 1014046, -751052, -831972, 1583024, -1342747, 407298, 935449, 407384, -523479, 116095, 993470, 327996, -1321466, 400966, -1145132, 744166, -194742, 1016948, -822206, -55196, 1514856, -1459660, -99774, -130689, 230463, -1314995, -1318979, -731595, -177906, -1181437, 1359343, 769374, 1523256, 1072939, -134301, 925197, -790896, 41986, -405243, 363257, 1068810, -331681, -737129, 696682, -708000, 11318, -128688, 645052, -516364, 186155, -690303, 504148, 227254, 1272184, -1499438, 729568, -771787, 42219, -91681, 1426689, -1335008, 1252902, 789248, 1323419, -541523, 735458, -193935, 1436097, -248593, -1187504, 1385566, -698819, -686747, 199498, 1187861, -1387359, 13062, -790433, 777371, 160209, 688607, -848816, -135640, 629267, -493627, 1145040, 1364431, 856098, -196491, 240813, -44322, -341159, 146646, 194513, 459273, -1273680, 814407, 1037090, -872327, -164763, 1078832, -660393, -418439, 1501599, -1431183, -70416, 286265, 80181, -366446, 1481962, -1651504, 169542, -244051, -1613863, -1507655, 1145973, -374813, -771160, -82502, -176676, 259178, 954512, 1570856, 840201, 1077888, -534730, -543158, -777153, 1063137, -285984, 1536500, -1474419, -62081, -218297, 968790, -750493, 1040870, 435621, -1476491, -1547474, 1673163, -125689, -1589023, 1317885, 271138, 1125999, 1677990, 561580, -1408592, 1147112, 261480, 341068, -950968, 609900, -907115, 544388, 362727, -1181564, 1087466, 94098, -542273, 1170427, -628154, -1515223, 249991, 1265232, -1268616, 1081518, 187098,
};


static const int32_t streamlined_inv_CT_table_Q1[NTT_N - 1] = {
501252, 501252, -813816, 501252, -813816, -375962, 528216, 501252, 501252, -813816, 501252, -813816, -375962, 528216, -813816, -375962, 528216, 1211401, -1377729, 92513, -1019169, -375962, 1211401, -1377729, -194742, 407384, 1524973, 610895, 528216, 92513, -1019169, -574218, -1225515, 1279676, 1466880, 1211401, -194742, 407384, -542273, 341068, -1589023, -218297, -1377729, 1524973, 610895, 1077888, 1145973, 286265, 1037090, 92513, -574218, -1225515, -196491, 160209, 1385566, 1252902, -1019169, 1279676, 1466880, 227254, 696682, -134301, -1314995
};

static const int32_t _3x2block_intt_table_Q1[27] = {
501252, 501252, -813816, 501252, -813816, -375962, 528216, 980652, -1481904, 501252, 501252, 501252, 501252, 1587783, -1619741, 501252, -1619741, -1033921, -813816, -813816, -813816, -813816, 618416, -1646113, -813816, -1646113, 1215190
};

static const int32_t _3x2_NTT_table_Q1[32] = {
omega93Q1,       omega96Q1,
       1,                1,               1,
       1,         omega9Q1,       omega92Q1,
       1,        omega92Q1,       omega94Q1,
 omega4Q1,        omega4Q1,        omega4Q1,
 omega4Q1,  omega4omega9Q1, omega4omega92Q1,
 omega4Q1, omega4omega92Q1, omega4omega94Q1
};

static const int32_t _3x2_NTT_Rmod_table_Q1[32] = {
omega93RmodQ1,       omega96RmodQ1,
       RmodQ1,              RmodQ1,              RmodQ1,
       RmodQ1,        omega9RmodQ1,       omega92RmodQ1,
       RmodQ1,       omega92RmodQ1,       omega94RmodQ1,
 omega4RmodQ1,        omega4RmodQ1,        omega4RmodQ1,
 omega4RmodQ1,  omega4omega9RmodQ1, omega4omega92RmodQ1,
 omega4RmodQ1, omega4omega92RmodQ1, omega4omega94RmodQ1
};

#define NTT_forward(out, in){ \
    __asm_Good_3x2(out, _3x2_NTT_Rmod_table_Q1, Q1prime, Q1, in); \
    __asm_3x2block_ntt(out, _3x2_NTT_Rmod_table_Q1, Q1prime, Q1); \
    __asm_ntt(out, streamlined_CT_table_Q1, Q1prime, Q1); \
}

#define NTT_forward_small(out, in){ \
    __asm_Good_3x2_small(out, _3x2_NTT_table_Q1, Q1prime, Q1, in); \
    __asm_3x2block_ntt(out, _3x2_NTT_Rmod_table_Q1, Q1prime, Q1); \
    __asm_ntt(out, streamlined_CT_table_Q1, Q1prime, Q1); \
}

#define NTT_mul(out, in1, in2) __asm_base_mul(out, mul_Rmod_table_Q1, Q1prime, Q1, in1, in2)


#define NTT_inv(out, in){ \
    __asm_intt(in, streamlined_inv_CT_table_Q1, Q1prime, Q1); \
    __asm_3x2block_intt(in, _3x2block_intt_table_Q1, Q1prime, Q1); \
    __asm_i_Good(out, in); \
}


#define NTT_final_map(out, in) __asm_final_map(out, invNinv9R2modQ1, Q1prime, Q1, in)


#endif


